{"version":3,"file":"lib/autocapture.js","mappings":"mBAEiBA,SCAT,CAACC,UAAW,IDCX,IAAIC,SAAQ,CAACC,EAASC,KAC7BC,GAAGC,UAAUC,YAAc,WAC3B,MAAMC,EAAQ,IELhB,MAEEC,YAAYC,EAAGV,GACbW,KAAKD,EAAIA,EACTC,KAAKC,eAAiB,GACtBD,KAAKE,OAAS,GACdF,KAAKG,YAAcd,GAASC,WAAa,GACzCU,KAAKI,WAAa,IACpB,CAMAC,sBACE,MAEMC,GAoBmBC,EAtBVP,KAAKD,EAAES,YAAYC,IAuB7B,IAAIlB,SAAQ,CAACC,EAASC,KAC3Bc,EAAOG,QAAOJ,IACZd,EAAQc,EAAK,GACb,KAJN,IAA6BC,EAnBzBP,KAAKC,eAAeU,KAAKL,EAC3B,CAKAM,OACEZ,KAAKD,EAAEc,QACT,CAEAC,kBAGE,OAFAd,KAAKY,OACLZ,KAAKE,aAiBTY,eAA6BC,GAC3B,MAAMC,EAAc,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9BD,EAAYC,SAAWF,EAAIE,GAE7B,OAAOD,CACT,CAvBwBG,CAAcnB,KAAKC,gBAChCD,KAAKE,MACd,GF3BwBF,KAAMX,GAE5BW,KAAKoB,IAAMvB,CACb,EAEAH,GAAGC,UAAUU,oBAAsB,WACjCL,KAAKoB,IAAIf,sBAELL,KAAKqB,YAAcrB,KAAKoB,IAAIjB,aAC9BH,KAAKoB,IAAIE,YAAYC,MAAK,SAASrB,GACjCV,EAAQU,EACV,GAEJ,EAEAR,GAAGC,UAAU6B,eAAe,OAAQ9B,GAAGC,UAAUC,aACjDF,GAAGC,UAAU6B,eAAe,OAAQ9B,GAAGC,UAAUU,oBAAoB,KCnB9CkB,MAAKrB,IAC5BuB,QAAQC,IAAIxB,EAAO,G","sources":["webpack://video-export/./src/autocap.js","webpack://video-export/./src/index.js","webpack://video-export/./src/p5cap.js"],"sourcesContent":["import P5Cap from './p5cap';\n\nconst autocap =  options => {\n  return new Promise((resolve, reject) => {\n  p5.prototype.createP5Cap = function() {\n  const p5cap = new P5Cap(this, options);\n\n    this.Cap = p5cap;\n  }\n\n  p5.prototype.captureCurrentFrame = function() {\n    this.Cap.captureCurrentFrame();\n\n    if (this.frameCount >= this.Cap.totalFrames) {\n      this.Cap.getFrames().then(function(frames) {\n        resolve(frames);\n      })\n    }\n  }\n\n  p5.prototype.registerMethod('init', p5.prototype.createP5Cap);\n  p5.prototype.registerMethod('post', p5.prototype.captureCurrentFrame);\n});\n}\n \nexport default autocap;","import autocap from './autocap';\n\nautocap({numFrames: 10}).then(frames => {\n  console.log(frames);\n})","class P5Cap {\n\n  constructor(p, options) {\n    this.p = p;\n    this._pendingFrames = [];\n    this.frames = [];\n    this.totalFrames = options?.numFrames || 60;\n    this.onComplete = null;\n  }\n\n  // push a promise that will resolve to a blob to the\n  // frames array (this is done so that the frames stay\n  // in order, since the canvas.toBlob function returns\n  // asynchronously)\n  captureCurrentFrame() {\n    const canvas = this.p._curElement.elt;\n\n    const blob = canvasToBlobPromise(canvas);\n    this._pendingFrames.push(blob);\n  }\n\n  // stop the draw loop when frameCount reaches numFrames\n  // then resolve the promise array to a blob array\n  // containing the frames\n  stop(){\n    this.p.noLoop();\n  }\n\n  async getFrames() {\n    this.stop();\n    this.frames = await resolveFrames(this._pendingFrames);\n    return this.frames;\n  }\n\n}\n\n// promisify canvas.toBlob\nfunction canvasToBlobPromise(canvas) {\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      resolve(blob);\n    });\n  });\n}\n\n// resolve an array of promises and return a new array\n// with the results\nasync function resolveFrames(arr) {\n  const resolvedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    resolvedArr[i] = await arr[i];\n  }\n  return resolvedArr;\n}\n\nexport default P5Cap;"],"names":["options","numFrames","Promise","resolve","reject","p5","prototype","createP5Cap","p5cap","constructor","p","this","_pendingFrames","frames","totalFrames","onComplete","captureCurrentFrame","blob","canvas","_curElement","elt","toBlob","push","stop","noLoop","async","arr","resolvedArr","i","length","resolveFrames","Cap","frameCount","getFrames","then","registerMethod","console","log"],"sourceRoot":""}